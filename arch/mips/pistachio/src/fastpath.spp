/*
 * Copyright (c) 2002-2004, University of New South Wales
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
/*
 * Copyright (c) 2007 Open Kernel Labs, Inc. (Copyright Holder).
 * All rights reserved.
 *
 * 1. Redistribution and use of OKL4 (Software) in source and binary
 * forms, with or without modification, are permitted provided that the
 * following conditions are met:
 *
 *     (a) Redistributions of source code must retain this clause 1
 *         (including paragraphs (a), (b) and (c)), clause 2 and clause 3
 *         (Licence Terms) and the above copyright notice.
 *
 *     (b) Redistributions in binary form must reproduce the above
 *         copyright notice and the Licence Terms in the documentation and/or
 *         other materials provided with the distribution.
 *
 *     (c) Redistributions in any form must be accompanied by information on
 *         how to obtain complete source code for:
 *        (i) the Software; and
 *        (ii) all accompanying software that uses (or is intended to
 *        use) the Software whether directly or indirectly.  Such source
 *        code must:
 *        (iii) either be included in the distribution or be available
 *        for no more than the cost of distribution plus a nominal fee;
 *        and
 *        (iv) be licensed by each relevant holder of copyright under
 *        either the Licence Terms (with an appropriate copyright notice)
 *        or the terms of a licence which is approved by the Open Source
 *        Initative.  For an executable file, "complete source code"
 *        means the source code for all modules it contains and includes
 *        associated build and other files reasonably required to produce
 *        the executable.
 *
 * 2. THIS SOFTWARE IS PROVIDED ``AS IS'' AND, TO THE EXTENT PERMITTED BY
 * LAW, ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE, OR NON-INFRINGEMENT, ARE DISCLAIMED.  WHERE ANY WARRANTY IS
 * IMPLIED AND IS PREVENTED BY LAW FROM BEING DISCLAIMED THEN TO THE
 * EXTENT PERMISSIBLE BY LAW: (A) THE WARRANTY IS READ DOWN IN FAVOUR OF
 * THE COPYRIGHT HOLDER (AND, IN THE CASE OF A PARTICIPANT, THAT
 * PARTICIPANT) AND (B) ANY LIMITATIONS PERMITTED BY LAW (INCLUDING AS TO
 * THE EXTENT OF THE WARRANTY AND THE REMEDIES AVAILABLE IN THE EVENT OF
 * BREACH) ARE DEEMED PART OF THIS LICENCE IN A FORM MOST FAVOURABLE TO
 * THE COPYRIGHT HOLDER (AND, IN THE CASE OF A PARTICIPANT, THAT
 * PARTICIPANT). IN THE LICENCE TERMS, "PARTICIPANT" INCLUDES EVERY
 * PERSON WHO HAS CONTRIBUTED TO THE SOFTWARE OR WHO HAS BEEN INVOLVED IN
 * THE DISTRIBUTION OR DISSEMINATION OF THE SOFTWARE.
 *
 * 3. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR ANY OTHER PARTICIPANT BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
 * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*                
 * Author:        Carl van Schaik
 * Description:   Kernel entry points for syscalls
 */                

#if 0//defined(CONFIG_IPC_FASTPATH)

#include <l4.h>
#include <macros.h>
#include <arch/asm.h>
#include <arch/regdef.h>
#include <arch/config.h>
#include <arch/context.h>
#include <arch/syscalls.h>
#include <asmsyms.h>
#include <tcb_layout.h>


#if 0
#define START_SYSCALL_COUNTER       \
        mfc0    k0, CP0_COUNT;      \
        nop;                        \
        nop;                        \
        mtc0    k0, CP0_ERROREPC

#if CONFIG_PLAT_SB1
#define STOP_SYSCALL_COUNTER        \
        nop;    \
        nop;    \
        nop;    \
        nop;    \
        nop;    \
        nop;    \
        mfc0    t2, CP0_COUNT;      \
        mfc0    t3, CP0_ERROREPC;   \
        nop;    \
        nop;    \
        dsub    AT, t2, t3
#else
#define STOP_SYSCALL_COUNTER        \
        nop;    \
        nop;    \
        nop;    \
        nop;    \
        nop;    \
        nop;    \
        mfc0    t2, CP0_COUNT;      \
        mfc0    t3, CP0_ERROREPC;   \
        nop;    \
        nop;    \
        dsub    AT, t2, t3;         \
        dsll    AT, AT, 1;
#endif

#if CONFIG_PLAT_ERPCN01
#define d0 k0
#define d1 k1
#define PRINT_SYSCALL_TIMES     \
        li      t2, 28;         \
1:;     \
        dsrlv   t3, AT, t2;     \
        andi    t3, 0xf;        \
        sub     t3, 10;         \
        bgez    t3, 2f;         \
        add     t3, '0'+10;     \
        b 3f;                   \
2:;     \
        add     t3, 'a';        \
3:;     \
        dla     d0, propane_uart;   \
        ld      d0, 0(d0);      \
4:;     \
        lw      d1,8(d0);       \
        andi    d1,d1,0xf;      \
        sltiu   d1,d1,13;       \
        beqz    d1,4b;          \
        sw      t3,4(d0);       \
        sub     t2, 4;          \
        bgez    t2, 1b;         \
        \
        li      t3, '\r';       \
4:;     \
        lw      d1,8(d0);       \
        andi    d1,d1,0xf;      \
        sltiu   d1,d1,13;       \
        beqz    d1,4b;          \
        sw      t3,4(d0);       \
        li      t3, '\n';       \
4:;     \
        lw      d1,8(d0);       \
        andi    d1,d1,0xf;      \
        sltiu   d1,d1,13;       \
        beqz    d1,4b;          \
        sw      t3,4(d0)

#endif

#if CONFIG_PLAT_U4600
#define CS1_BASE                0x1c800000
#define Z85230_BASE             (CS1_BASE | 0x30)
#define MPSC_BASE               Z85230_BASE
#define PHYS_TO_CKSEG1(n)       (CKSEG1 | (n))
#define PHYS_TO_K1(x)           PHYS_TO_CKSEG1(x)
#define U4600_PORT0             PHYS_TO_K1(MPSC_BASE+2)
#define zRR0_TXEMPTY            0004

/* print a single character to the serial port  (k1) */
#define U4600_PUTC                                      \
        /* wait for device to become ready */           \
1:      dla     k0, U4600_PORT0;                        \
        lb      k0, 0(k0);                              \
        andi    k0, zRR0_TXEMPTY;                       \
        beqz    k0, 1b;                                 \
                                                        \
        /* transmit by writing to the second byte */    \
        dla     k0, U4600_PORT0;                        \
        sb      k1, 1(k0);                              \
        sync


#define PRINT_SYSCALL_TIMES     \
        li      t2, 28;         \
1:;     \
        dsrlv   k1, AT, t2;     \
        andi    k1, 0xf;        \
        sub     k1, 10;         \
        bgez    k1, 2f;         \
        add     k1, '0'+10;     \
        b 3f;                   \
2:;     \
        add     k1, 'a';        \
3:;     \
4:      dla     k0, U4600_PORT0;                        \
        lb      k0, 0(k0);                              \
        andi    k0, zRR0_TXEMPTY;                       \
        beqz    k0, 4b;                                 \
                                                        \
        /* transmit by writing to the second byte */    \
        dla     k0, U4600_PORT0;                        \
        sb      k1, 1(k0);                              \
        sync;                   \
        sub     t2, 4;          \
        bgez    t2, 1b;         \
        \
        li      k1, '\n';       \
4:      dla     k0, U4600_PORT0;                        \
        lb      k0, 0(k0);                              \
        andi    k0, zRR0_TXEMPTY;                       \
        beqz    k0, 4b;                                 \
                                                        \
        /* transmit by writing to the second byte */    \
        dla     k0, U4600_PORT0;                        \
        sb      k1, 1(k0);                              \
        sync
#endif

#if CONFIG_PLAT_SB1
#define CKSEG1      0xffffffffa0000000
#define PHYS_TO_CKSEG1(n)     (CKSEG1 | (n))
#define DUART_PHYS              0x0010060000
#define DUART_PHYS_SIZE         0x100
#define DUART_STATUS            0x120
#define DUART_TX_HOLD           0x170
#define DUART_TX_RDY            (1<<2)

#define DUART_REG(chan,r)       (DUART_PHYS_SIZE*(chan) + (r))
#define DUART_REG_PHYS(chan,r)  (DUART_PHYS + DUART_REG(chan,r))

#define PRINT_SYSCALL_TIMES     \
        li      t2, 28;         \
1:;     \
        dsrlv   k1, AT, t2;     \
        andi    k1, 0xf;        \
        sub     k1, 10;         \
        bgez    k1, 2f;         \
        add     k1, '0'+10;     \
        b 3f;                   \
2:;     \
        add     k1, 'a';        \
3:;     \
4:      dla     k0, PHYS_TO_CKSEG1(DUART_REG_PHYS(0,DUART_STATUS));                     \
        ld      k0, 0(k0);                              \
        andi    k0, DUART_TX_RDY;                       \
        beqz    k0, 4b;                                 \
                                                        \
        /* transmit by writing to the second byte */    \
        dla     k0, PHYS_TO_CKSEG1(DUART_REG_PHYS(0,DUART_TX_HOLD));                    \
        sd      k1, 0(k0);                              \
        sub     t2, 4;          \
        bgez    t2, 1b;         \
        \
        li      k1, '\r';       \
4:      dla     k0, PHYS_TO_CKSEG1(DUART_REG_PHYS(0,DUART_STATUS));                     \
        ld      k0, 0(k0);                              \
        andi    k0, DUART_TX_RDY;                       \
        beqz    k0, 4b;                                 \
                                                        \
        /* transmit by writing to the second byte */    \
        dla     k0, PHYS_TO_CKSEG1(DUART_REG_PHYS(0,DUART_TX_HOLD));                    \
        sd      k1, 0(k0);      \
        li      k1, '\n';       \
4:      dla     k0, PHYS_TO_CKSEG1(DUART_REG_PHYS(0,DUART_STATUS));                     \
        ld      k0, 0(k0);                              \
        andi    k0, DUART_TX_RDY;                       \
        beqz    k0, 4b;                                 \
                                                        \
        /* transmit by writing to the second byte */    \
        dla     k0, PHYS_TO_CKSEG1(DUART_REG_PHYS(0,DUART_TX_HOLD));                    \
        sd      k1, 0(k0)
#endif

#else
#define START_SYSCALL_COUNTER
#define STOP_SYSCALL_COUNTER
#define PRINT_SYSCALL_TIMES
#endif

        .set noat
        .set noreorder
BEGIN_PROC(__mips64_interrupt_fp)
        START_SYSCALL_COUNTER
        mfc0    k1, CP0_CAUSE                   /* get interrupt cause */
        li      k0, 8<<2
        andi    k1, k1, 0x7c
        bne     k0, k1, other_exception         /* If not SYSCALL, goto normal path */
        mfc0    k0, CP0_STATUS                  /* get STATUS register */
        li      $1, SYSCALL_ipc
        bne     v0, $1, _goto_mips_l4syscall    /* if not IPC goto normal syscall entry */
        lui     t5, %hi(K_CURRENT_TCB)          /* Load kernel stack base address */

        j       _mips64_fastpath
        move    t7, k0

_goto_mips_l4syscall:
        j _mips_l4syscall
        nop
        
other_exception:
IF_MIPS64(dsll    k1, k1, 1)
        lui     k0, %hi(exception_handlers)
        add     k0, k0, k1
        LDR     k0, %lo(exception_handlers)(k0)
        jr      k0
        nop
END_PROC(__mips64_interrupt_fp)

/* Pistachio defines */

#define to_tid      a0
#define from_tid    a1 
#define timeout     a2
#define current     a3
#define to_tcb      t0
#define from_tcb    t1
#define to_state    t2
#define dest_partner    t3
#define current_global  v0

#define tmp0        t4
#define tmp1        t5
#define tmp2        t6
#define tmp3        t7
#define tmp4        t8
#define tmp5        t9
#define tmp6        t3

#define mr0         v1
#define mr1         s0
#define mr2         s1
#define mr3         s2
#define mr4         s3
#define mr5         s4
#define mr6         s5
#define mr7         s6
#define mr8         s7

        .set reorder
BEGIN_PROC(_mips64_fastpath)
        .set noat
        srl     t6, t7, 5               /* clear IE, EXL, ERL, KSU */
        move    t4, sp
        sll     t6, t6, 5
        mtc0    t6, CP0_STATUS          /* Enter kernel mode */

        LDR     current, %lo(K_CURRENT_TCB)(t5) /* Load saved stack */
        MFC0    t6, CP0_EPC

        /* this is why XTLB has its own stack - in case we pagefault on the TCB */
        ADR     sp, __stack + STACK_TOP
        STR     ra, OFS_TCB_ARCH_CONTEXT+PT_RA(current) /* Save RA */
        STR     t7, OFS_TCB_ARCH_CONTEXT+PT_STATUS(current) /* Save status */
        STR     t4, OFS_TCB_ARCH_CONTEXT+PT_SP(current) /* Save stack */

        ADDIU   t6, t6, 4               /* Calc New EPC */

        STR     t6, OFS_TCB_ARCH_CONTEXT+PT_EPC(current)                /* Save EPC */

/*** START FASTPATH ***/
send_path:
        .set    noreorder
        /* Look for a nil from-tid / to-tid. */                 /* TEST0 */
        beqz    to_tid, _mips64_slowpath                        /* TEST0 */

        andi    tmp0, mr0, 0x3fc0                               /* TEST1 | Bits 13 through 6 should be zero for fast path in mr0 */

/* XXX */
#ifdef CONFIG_IS_64BIT
        dsrl    tmp5, to_tid, 32        /* calculate to_tcb */  /* CALC1 */
        LUI     to_tcb, %hi(__thread_clist)                     /* CALC1 */
        dsll    tmp5, CLIST_ENTRY_SHIFT                         /* CALC1 */
        ADDIU   to_tcb, %lo(__thread_clist)                     /* CALC1 */
#endif
        /* Check that the receive timeout is infinite */        /* TEST3 | (lower 16 timeout bits == 0) */
        andi    tmp2, timeout, 0xffff                           /* TEST3 */
        add     to_tcb, tmp5, to_tcb                            /* CALC1 */
        LDR     to_tcb, OFS_CLIST_ENTRY_TCB(to_tcb)             /* CALC1 */
        /* We don't do typed words or propagation.*/            /* TEST1 */
        bnez    tmp0, _mips64_slowpath                          /* TEST1 */
        andi    tmp0, mr0, 0x4000
        beqz    tmp0, _mips64_slowpath

        /* Check if any resource bits are set */                /* TEST9 & TEST10 */
        LDR     tmp3, OFS_TCB_RESOURCE_BITS(to_tcb)             /* TEST9 */
        LDR     tmp0, OFS_TCB_RESOURCE_BITS(current)            /* TEST10 */

        bnez    tmp3, _mips64_slowpath                          /* TEST9 */
        LDR     tmp1, OFS_TCB_MYSELF_GLOBAL(to_tcb)             /* TEST4 */

        bnez    tmp0, _mips64_slowpath                          /* TEST10 */
        LDR     to_state, OFS_TCB_THREAD_STATE(to_tcb)          /* TEST5 */
        /*
         * Check partner ID     CALC1, TEST4
         */

        /* Check to_tcb->get_global_id == to_tid */             /* TEST4 */
        bne     tmp1, to_tid, _mips64_slowpath                  /* TEST4 | May be an error, may be just a receive etc. */

        /*
         * Check partner is waiting                                TEST5
         */
#if defined(CONFIG_IS_32BIT)
#define MINUS_ONE       0xffffffff
#elif defined(CONFIG_IS_64BIT)
#define MINUS_ONE       0xffffffffffffffff
#endif

        /* is_waiting */
#if ((TSTATE_WAITING_FOREVER != MINUS_ONE) && defined(__ASMSYMS_H__))  /* Don't let the preprocessor die due to no asmsyms */
# error "expecting thread_state_t::waiting_forever to be -1ul"
#endif
        LI      tmp3, -1                                        /* TEST5 & TEST6 & TEST7 *
        bnez    tmp2, _mips64_slowpath                          /* TEST3 */
        LDR     dest_partner, OFS_TCB_PARTNER(to_tcb)           /* TEST6 */

        bne     to_state, tmp3, _mips64_slowpath                /* TEST5 */
        LDR     current_global, OFS_TCB_MYSELF_GLOBAL(current)  /* TEST6 */

        /* IS_WAITING_GLOBAL:   (tcb->get_partner() == current->get_global_id()) || tcb->get_partner().is_anythread() */
        /* is_anythread() */                                    /* TEST6 */

        beq     tmp3, dest_partner, 1f                          /* TEST6 */
        lui     ra, %hi(ipc_finish)                             /* RA CALC */

        /* tcb->get_partner() == current->get_global_id() */    /* TEST6 */
        bne     current_global, dest_partner, _mips64_slowpath  /* TEST6 */

#ifdef CONFIG_SMP
        /* check that both threads are on the same CPU */
1:      LDR     tmp0, OFS_TCB_CPU(to_tcb)
        LDR     tmp1, OFS_TCB_CPU(current)
        nop
        bne     tmp0, tmp1, _mips64_slowpath
        nop
#else
1:
#endif
        LDR     tmp4, OFS_TCB_SPACE(to_tcb)                     /* TEST11 - get: to_tcb->space */
        andi    tmp5, mr0, 0x3f                                 /* TEST2 */ 
        beqz    tmp4, _mips64_slowpath                          /* TEST11 - Null space = interrupt thread */
        sub     tmp5, 8                                         /* TEST2 */

        /*
         * Check that receive phase blocks                         TEST7
         */
        beq     to_tid, from_tid, 2f                            /* Call ? */
        ADDIU   ra, %lo(ipc_finish)                             /* RA CALC */

        LDR     tmp6, OFS_TCB_SEND_HEAD(current)                /* TEST8 | Require send_head to be empty */
        nop
        bnez    tmp6, _mips64_slowpath                          /* TEST8 */
        nop
        bne     tmp3, from_tid, check_other_tcb                 /* TEST7 */
        nop
2:

// continue starts here
        STR     tmp3, OFS_TCB_THREAD_STATE(current)             /* STORE1 */

        /* FALLTHRU */
continue_ipc:
        /* This is the point of no return --- after this we cannot go to the slow path */

        STR     from_tid, OFS_TCB_PARTNER(current)
        blez    tmp5, switch_to                                 /* TEST2 */
        STR     s8, OFS_TCB_ARCH_CONTEXT+PT_S8(current)

        LDR     tmp0, OFS_TCB_UTCB(current)                     /* tmp0 = current utcb */
        sll     tmp2, tmp5, 3                                   /* number to copy * 8 */
        LDR     tmp1, OFS_TCB_UTCB(to_tcb)                      /* tmp1 = to utcb */

        andi    tmp6, tmp5, 1
        ADDU    tmp2, tmp2, tmp0

        beqz    tmp6, 10f
        LDR     tmp3, (UTCB_MR_OFFSET+SIZE(9*4))(tmp0)
        ADDIU   tmp0, SIZE(4)
        ADDIU   tmp1, SIZE(4)
        beq     tmp0, tmp2, switch_to
        STR     tmp3, (UTCB_MR_OFFSET+SIZE(9*4-4))(tmp1)
copy_loop:
        LDR     tmp3, (UTCB_MR_OFFSET+SIZE(9*4))(tmp0)
10:
        LDR     tmp6, (UTCB_MR_OFFSET+SIZE(9*4+4))(tmp0)
        ADDIU   tmp1, SIZE(4*2)
        ADDIU   tmp0, SIZE(4*2)
        STR     tmp3, (UTCB_MR_OFFSET+SIZE(9*4-8))(tmp1)
        bne     tmp0, tmp2, copy_loop
        STR     tmp6, (UTCB_MR_OFFSET+SIZE(9*4-4))(tmp1)
switch_to:

        /*
         * Set thread state to waiting                             STORE1
         */

/* mips switch_to */
        /* At this point, we have set up the sending thread's TCB state.  We now setup the
         * stack so that when we are next switched to we do the right thing (set state to running
         * and return partner) --- this only happens in the generic send case.
         */
        lw      tmp1, SPACE_ASID_OFFSET(tmp4)   /* get: space->asid (assume no asid management) */

        sd      ra, OFS_TCB_CONT(current)       /* RA CALC */

        lui     tmp5, %hi(K_CURRENT_TCB)        /* Load kernel stack base address */

        .set at
        MTC0    tmp1, CP0_ENTRYHI       /* Set new ASID */
/* XXX */
#ifdef CONFIG_IS_64BIT
        dsll    tmp4, tmp4, 32
#endif
        STR     to_tcb, %lo(K_CURRENT_TCB)(tmp5)        /* Set current TCB */
        LI      tmp0, TSTATE_RUNNING

/* XXX */
        MTC0    tmp4, CP0_CONTEXT       /* Save current Page Table */

        /* Mark self as runnable */
        sd      tmp0, OFS_TCB_THREAD_STATE(to_tcb)

        /* Set return value to sender's global ID (already in v0)*/

        mfc0    t6, CP0_STATUS
        LDR     t7, OFS_TCB_ARCH_CONTEXT+PT_SP(to_tcb)          /* load stack */
        ori     t6, t6, ST_EXL          /* set Exception Level */

        /* Clean up mr0 (clear receive flags) */
        and     mr0, ~(0xe << 12)

        mtc0    t6, CP0_STATUS          /* to disable interrupts, we now can set EPC */
        LDR     t4, OFS_TCB_ARCH_CONTEXT+PT_STATUS(to_tcb)      /* load status */
        LDR     t5, OFS_TCB_ARCH_CONTEXT+PT_EPC(to_tcb)         /* load epc */
        LDR     ra, OFS_TCB_ARCH_CONTEXT+PT_RA(to_tcb)          /* load ra */

        .set    reorder

        STOP_SYSCALL_COUNTER
        PRINT_SYSCALL_TIMES

        MTC0    t5, CP0_EPC             /* restore EPC */ 
        LDR     s8, OFS_TCB_ARCH_CONTEXT+PT_S8(to_tcb)          /* restore s8 */
        LDR     t0, OFS_TCB_UTCB_LOCATION(to_tcb)    /* Load UTCB */

        LI      t3, CONFIG_MIPS_STATUS_MASK
        move    sp, t7                  /* restore stack */
        and     t6, t3, t6              /* compute new status register */
        nor     t3, zero, t3
        and     t4, t3, t4
        or      t4, t6, t4              /*            " "              */
        mtc0    t4, CP0_STATUS          /* new status value */
        move    k0, t0                  /* Load UTCB into k0 */
nop
        .set push
        .set mips3
        eret
        .set pop

        .set    reorder
ipc_finish:     /* Return Address */
        lui     tmp1, %hi(KERNEL_BASE)  /* Load kernel base address */
        LDR     current, %lo(K_CURRENT_TCB)(tmp1)       /* Load current TCB */

        LI      tmp1, TSTATE_RUNNING

        /* first the state */
        STR     tmp1, OFS_TCB_THREAD_STATE(current)

        j       _mips_l4sysipc_return

check_other_tcb:
        .set    noreorder
        beqz    from_tid, _mips64_slowpath
/* XXX */
#ifdef CONFIG_IS_64BIT
        dsrl    tmp0, from_tid, 32                /* calculate from_tcb */
        lui     from_tcb, %hi(__thread_clist)
        dsll    tmp0, CLIST_ENTRY_SHIFT
        ADDIU   from_tcb, %lo(__thread_clist)
        add     from_tcb, tmp0, from_tcb
        LDR     from_tcb, OFS_CLIST_ENTRY_TCB(from_tcb)
#endif

        /* Check global ID */
        LDR     tmp0, OFS_TCB_MYSELF_GLOBAL(from_tcb)
        LDR     tmp1, OFS_TCB_THREAD_STATE(from_tcb)
        bne     tmp0, from_tid, _mips64_slowpath

        /*
         * Check if the thread is polling us --- if so, go to slow path
         */

        .set    push
        /* is_polling() */
        li      tmp2, TSTATE_POLLING
        .set    mips32
        bnel    tmp1, tmp2, continue_ipc        /* from_tcb isn't polling */
        .set    pop
        STR     tmp3, OFS_TCB_THREAD_STATE(current)             /* STORE1 */ /* from continue ipc */
        
        j       _mips64_slowpath
        nop

END_PROC(_mips64_fastpath)

        .set reorder
BEGIN_PROC(_mips64_slowpath)
        lui     ra, %hi(_mips_l4sysipc_return)
        LDR     t5, OFS_TCB_UTCB(current)
        ADDIU   ra, %lo(_mips_l4sysipc_return)
        STR     s8, OFS_TCB_ARCH_CONTEXT+PT_S8(current)
99:
        b 99b   // XXX fixme
        sd      mr0, 128(t5)
        sd      mr1, 136(t5)
        sd      mr2, 144(t5)
        sd      mr3, 152(t5)
        sd      mr4, 160(t5)
        sd      mr5, 168(t5)
        sd      mr6, 176(t5)
        sd      mr7, 184(t5)
        sd      mr8, 192(t5)
        j       sys_ipc
END_PROC(_mips64_slowpath)

#endif /* CONFIG_IPC_FASTPATH */

