- Finish mmap.  (wishlist: make it work for writing too, since then we really
would have mmap and it would be awesome).

- Documentation.

- Check for rights in copyin/out, pagefaults

- Set MAX_THEADS to 256.  Perhaps arrange so that 4 address spaces aren't being
wasted on the network/init/pager threads.
 --> (david) Yeah sure, I kind of like having them stored in the process struct but they
 do artificially use up process slots. Maybe we can have a different process list
 for kernel threads (except for sos which stays where it is).
 --> (david) Why change max threads to 256? I just changed the PID allocator
 to use MAX_ADDRESSES instead of threads and have tested allocating up to the max
 processes quite extensively.
 --> (ben) because since we dont really support threads there isnt much point
 in having a MAX_THREADS thing, and it could just get confusing.

- Check there are no side effects in assertions (so that we can disable them
easily when we hand in).

- Replace assertions with killing/deleting the offending process.  Since, the
failed assertions will probably be due to the process doing something stupid.

- Get rid of callbacks altogether in the structs?  Just use stack?

- Forkbomb runs fine when just creating 1 process but forking out 2 each run causes a
segmentation fork after a little while (around 30 processes).

- Get rid of FRAME_ALLOC_LIMIT, but if the kernel needs a frame and there are
none left then kill the process using the most memory.

- Fix the stat stuff in continueRead and continueWrite, why isn't it working?

- Clear mmapped things on process delete

- As well as checking for null process, check the process isn't a zombie.
Might want to use a "processActive" helper function or soemething.  Probably need
to do this on every "init" callback (at which point should be abandoned)

- Set (and unset) swap mask appropriately (alongside mmap mask!)

