- Very frequently SOS hangs on bootup on "waiting for PHY to become ready", with
*** sos_pager_handler: addr=0x0000000c ip=0x001488e4 sender=0
This might be our problem, not sure.  Not the same as the other unhandled page
fault that often happens (on a high address) which everybody gets and certainly
isn't our fault.

- There is a really weird bug (or otherwise) causing mangled output on the
computers at uni.  But not on my laptop.  Just run "ps" from sosh.  I hope and
assume that this is some kind of communication problem (and not from SOS) but
Nick seemed a little mistrusting.  So it could be a bug.  By the way, this does
happen on my laptop to some extent, so it's worth going over the console to see
if there is a bug that might cause this behaviour.

- Update crt (whatever that is) to kill a process when it finishes.  At the
moment it just pagefaults like crazy.  Apparently this is a mystery function
somewhere, possibly written in assembler (?).

- Need internal synchronisation of NFS, and it would make sense (compared to
what we already have) to use events.  It also would be easier to implement it
at the VFS level so may as well do it there.  I.e. VFS read and write (and who
knows maybe more?) requests get put on a queue and executed sequentially.
Incidentally we should try to produce this error before bothering to fix it.

- Fill in the missing bits from M7 we couldn't do due to not having a working
M6 - freeing allocated frames, freeing allocated slots in the swap file, and
freeing pager requests.  And freeing L4's resources (from sos_process_create).

- Need to spread the job of killing/deleting processes across the rootserver
and the pager.  Because they are running in separate threads obvoiusly, and
this has caused problems before so logically it's probably causing the problems
mentioned below.  However, this means that either process_delete becomes a
syscall targeted at the pager - a nice solution, but it's a little bit messy,
I would prefer to minimise the number of syscalls that need to go to the pager.
Alternatively we leave it in the rootserver and then allow the rootserver to
IPC the pager - but again I want to avoid this, and plus it makes it quite
difficult to do the segfault-killing from the pager.  A final alternative is
to have them as separate system calls and in libsos arrange them both to be
called - but this is somewhat bad design (relying on userspace to do something
important) and it still involves a separate syscall for the pager.
So in conclusion: this todo point, is to move the process_delete system call
to the pager (unfortunately).  Other ideas welcome of course.  Oh by the way,
this will still involve a system call in the rootserver, I just meant that the
initialising system call will go to the pager.  One small additional point is
that this supplementary SOS syscall will need to be "privileged" only i.e.
only callable by the pager (or nasty user tasks could conceivably crash stuff).

- Killing processes is now causing all sorts of problems, quite a range - from
crashing SOS to crashing the user to failed assertions.  Doesn't make sense to
fix this until the thing above has been dealt with, the problem will hopefully
disappear.

- investigate moving the kernel heap size setting to constants.h

- have the init_thread finish instead of just constantly sleeping.

- Improve syscall interface. Have a generic IPC library which provides our var arg
handle functions and use that for making system calls on both the user space side
and kernel side rather then duplicating code on both side like currently. Also
use jump table/function pointer array handling on receive side instead of giant
switch.

