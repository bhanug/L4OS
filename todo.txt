- There is a really weird bug (or otherwise) causing mangled output on the
computers at uni.  But not on my laptop.  Just run "ps" from sosh.  I hope and
assume that this is some kind of communication problem (and not from SOS) but
Nick seemed a little mistrusting.  So it could be a bug.  By the way, this does
happen on my laptop to some extent, so it's worth going over the console to see
if there is a bug that might cause this behaviour.

- Update crt (whatever that is) to kill a process when it finishes.  At the
moment it just pagefaults like crazy.  Apparently this is a mystery function
somewhere, possibly written in assembler (?).

- Very frequently SOS hangs on bootup on "waiting for PHY to become ready", we
really need to fix this if possible.  It's irritating and probably a SOS bug.
I assume some kind of race condition since it's somewhat random.
*** sos_pager_handler: addr=0x0000000c ip=0x001488e4 sender=0
(That is the last pager-debug message that prints).

- Need internal synchronisation of NFS, and it would make sense (compared to
what we already have) to use events.  It also would be easier to implement it
at the VFS level so may as well do it there.  I.e. VFS read and write (and who
knows maybe more?) requests get put on a queue and executed sequentially.

- Fill in the missing bits from M7 we couldn't do due to not having a working
M6 - freeing allocated frames, freeing allocated slots in the swap file, and
freeing pager requests.

- Hide swap file.  A nice way I can think of doing this is by adding it as a
special file, making all the callbacks NULL except for open which is just a
callback which returns SOS_VFS_NOFILE.  Oh and hmm there will also need to be
some way to prevent it from showing up in dirent.  Maybe just hide all hidden
files, Unix-style.  That's not really a hack (and we could even argue it's a
policy) but it's pretty restrictive.

- change debugging so that level 0 is only used for critical errors (also suggest
use level 1 for quite useful stuff, e.g some things which are currently on level 0).
Should be that we can run it with debugging set to 1 and nothing should print unless
a critical error or obvious bug occurs.

- Somehow startRequest is being called when allocLimit > 0.  Need to fix.

- get all threads having a name (.eg ps) and all setting L4_KDB_SetThreadName();

- investigate moving the kernel heap size setting to constants.h

- have the init_thread finish instead of just constantly sleeping.

- Improve syscall interface. Have a generic IPC library which provides our var arg
handle functions and use that for making system calls on both the user space side
and kernel side rather then duplicating code on both side like currently. Also
use jump table/function pointer array handling on receive side instead of giant
switch.

