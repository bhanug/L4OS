- Very frequently SOS hangs on bootup on "waiting for PHY to become ready", with
*** sos_pager_handler: addr=0x0000000c ip=0x001488e4 sender=0
This might be our problem, not sure.  Not the same as the other unhandled page
fault that often happens (on a high address) which everybody gets and certainly
isn't our fault.

- Move MaxReader, MaxWriter and the reader, writer counters out of consolefs
into the vfs and then handle opening already open vnodes in the vfs layer
instead of having each fs handle it.
(Undecided, changes live in vfs-exp branch)

- Update crt (whatever that is) to kill a process when it finishes.  At the
moment it just pagefaults like crazy.  Apparently this is a mystery funtion
somewhere, possibly written in assembler (?), or alternatively _Exit or _Abort
should get called too.

- Bugcheck the process waiting and deleting.

- Free L4's resources when deleting process.

- ELF loading.  Note that we should aim to load everything by setting the
relevant memory sections of whichever process as being on disk, and then having
a (potentially) different swap file for each one.  This will require (at least):
   - That swapfile.c doesn't act with a global swapfile, but rather some sort
   of swapfile struct containing a vnode and the available sections.  Could
   combine this in to a single allocated frame pretty easily, just use 32 bytes
   for the pointer and the remaining for the usual stuff.
   - A swapfile struct in the PCB.
   - That we figure out how to create ELF files that are formatted in nice ways
   (page aligned to something would be ideal).  Either that or the pager/regions
   need to be changed to support non-pagealigned addresses where necessary.

- Move pager-related syscalls to pager.

