/* List of TODO which aren't of high importance or nessecary */

- Improve syscall interface. Have a generic IPC library which provides our var arg
handle functions and use that for making system calls on both the user space side
and kernel side rather then duplicating code on both side like currently. Also
use jump table/function pointer array handling on receive side instead of giant
switch.
- (Comment) I agree, the libsos stuff would be nicer with varargs.  However the
switch is compiled as a jump table already so that's not really an issue.

- Move more things to the generic linked list implementation.
	- Timer driver
	- Process management (with threads)
	- irq
	- Bootinfo
	- ...
	- Filesystem stuff?

- There are comments in the code about not blocking SOS for too long on (what I
assume is) console writing.  It's pretty negligible but yeah I can see that the
problem does exist.  It's buffered now, so what we "need" (if we were to do it)
is a thread to do the flushing.

- investigate moving the kernel heap size setting to constants.h

- have the init_thread finish instead of just constantly sleeping.

- bug with vfs that opening a file in write truncate mode doesn't actually
truncate the file if its already open. Need to add a truncate function to the
vfs so we can just call that. (At moment truncate at file creation by just creating
a new file).

- Clean up copyin/out as well, there is a lot of repetition across the two
functions and they aren't so nice anyway.

- Move process deleting back to process.c (from pager.c) if possible.  Still
want to minimise the interface to the pager though.

- Check memory leaks in pager

- Don't ever close the default swapfile, and only ever open it

